[["Map",1,2,9,10,29,30,96,97],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.5.6","content-config-digest","12923d731944a7c7","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://bwrg3r.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":1234,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null,null],\"rehypePlugins\":[[null,{\"target\":\"_blank\",\"rel\":[\"nofollow\",\"noreferrer\",\"noopener\"]}],null,null,[null,{\"theme\":{\"light\":\"github-light\",\"dark\":\"github-dark\"}}],[null,{\"themes\":[\"github-light\",\"github-dark\"],\"plugins\":[{\"name\":\"Collapsible sections\",\"styleSettings\":{\"defaultValues\":{\"collapsibleSections\":{\"closedBorderWidth\":\"0\",\"closedPaddingBlock\":\"4px\",\"closedMargin\":\"0\",\"closedFontFamily\":\"inherit\",\"closedFontSize\":\"inherit\",\"closedLineHeight\":\"inherit\",\"openBorderWidth\":\"1px\",\"openPadding\":\"0\",\"openMargin\":\"0\",\"openBackgroundColor\":\"transparent\",\"openBorderColor\":\"transparent\"}},\"cssVarExclusions\":[],\"cssVarReplacements\":[[\"collapsibleSections\",\"cs\"]]},\"hooks\":{}},{\"name\":\"Line numbers\",\"styleSettings\":{\"defaultValues\":{\"lineNumbers\":{\"foreground\":\"inherit\",\"highlightForeground\":\"inherit\"}},\"cssVarExclusions\":[],\"cssVarReplacements\":[]},\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}],\"useDarkModeMediaQuery\":false,\"defaultProps\":{\"wrap\":true,\"collapseStyle\":\"collapsible-auto\",\"overridesByLang\":{\"ansi,bat,bash,batch,cmd,console,powershell,ps,ps1,psd1,psm1,sh,shell,shellscript,shellsession,text,zsh\":{\"showLineNumbers\":false}}},\"styleOverrides\":{\"borderColor\":\"var(--border)\",\"codeFontFamily\":\"var(--font-mono)\",\"codeBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"frames\":{\"editorActiveTabForeground\":\"var(--muted-foreground)\",\"editorActiveTabBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"editorActiveTabIndicatorBottomColor\":\"transparent\",\"editorActiveTabIndicatorTopColor\":\"transparent\",\"editorTabBarBackground\":\"transparent\",\"editorTabBarBorderBottomColor\":\"transparent\",\"frameBoxShadowCssValue\":\"none\",\"terminalBackground\":\"color-mix(in oklab, var(--secondary) 25%, transparent)\",\"terminalTitlebarBackground\":\"transparent\",\"terminalTitlebarBorderBottomColor\":\"transparent\",\"terminalTitlebarForeground\":\"var(--muted-foreground)\"},\"lineNumbers\":{\"foreground\":\"var(--muted-foreground)\"},\"uiFontFamily\":\"var(--font-sans)\"}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"picoctf2025",{"id":11,"data":13,"body":23,"filePath":24,"assetImports":25,"digest":27,"deferredRender":28},{"title":14,"description":15,"date":16,"image":17,"tags":18,"authors":20},"picoCTF 2025","A compilation of picoCTF 2025 Writeups",["Date","2025-03-21T00:00:00.000Z"],"__ASTRO_IMAGE_./1200x630.png",[19],"picoCTF",[21,22],"gr1d","w_11","## [Reverse Engineering]\r\n\r\n## Flag Hunters  \r\n![](./assets/re/flag_hunt/question.png)  \r\n---\r\n### Goals\r\nWhen the program starts, the lip is set to the line [VERSE], to retrieve the secret_intro, we need to alter the program so the lip variable set to the line of flag\r\n```\r\nPico warriors rising, puzzles laid bare,\r\nSolving each challenge with precision and flair.\r\nWith unity and skill, flags we deliver,\r\nThe etherâ€™s ours to conquer, '''\\\r\n+ flag + '\\n'\r\n```\r\nas shown, flag is at line 4\r\n\r\nso passing index 0 to 3 will works, printing at the start of the lines at most line 4, index 3\r\n\r\n**Payload:** `\u003Cany_text>;RETURN \u003C0 to 3>   (This is not injection)`\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{70637h3r_f0r3v3r_c659e814}`\r\n\r\n\r\n## Quantum Scrambler  \r\n![](./assets/re/quantum/question.png)  \r\n---\r\n### Goals\r\n1. Decrypt the encryption and retrieve the flag\r\n2. Dissect the elements, and observe the scramble\r\n3. Found final payload, decrypt with reversed scrambler\r\n---\r\n### Solution\r\nReversed scrambler:\r\n```python\r\nimport ast\r\n\r\ndef flatten(lst):\r\n    flat = []\r\n    for item in lst:\r\n        if isinstance(item, list):\r\n            flat.extend(flatten(item))\r\n        else:\r\n            flat.append(item)\r\n    return flat\r\n\r\ndef unscramble(cypher):\r\n    print(\"Outer list elements:\")\r\n    for index, element in enumerate(cypher):\r\n        print(f\"Element {index}: {element}\")\r\n    print(\"-\" * 40)\r\n    \r\n    flat_list = flatten(cypher)\r\n    \r\n    hex_strings = [s for s in flat_list if isinstance(s, str) and s.startswith(\"0x\")]\r\n    \r\n    flag_chars = [chr(int(h, 16)) for h in hex_strings]\r\n    flag = ''.join(flag_chars)\r\n    return flag\r\n\r\ndef main():\r\n    input_file = 'output.txt'\r\n    \r\n    try:\r\n        with open(input_file, 'r') as f:\r\n            cipher_text = f.read()\r\n    except Exception as e:\r\n        print(f\"Error reading file {input_file}: {e}\")\r\n        return\r\n    \r\n    try:\r\n        cypher = ast.literal_eval(cipher_text)\r\n    except Exception as e:\r\n        print(\"Error interpreting cipher text:\", e)\r\n        return\r\n    \r\n    flag = unscramble(cypher)\r\n    print(\"Recovered flag:\", flag)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n``` \r\n**Final payload:** `[['0x70'],['0x69'],['0x63'],['0x6f'],['0x43'],['0x54'],['0x46'],['0x7b'],['0x70'],['0x79'],['0x74'],['0x68'],['0x6f'],['0x6e'],['0x5f'],['0x69'],['0x73'],['0x5f'],['0x77'],['0x65'],['0x69'],['0x72'],['0x64'],['0x65'],['0x66'],['0x38'],['0x65'],['0x61'],['0x30'],['0x63'],['0x66'],['0x7d']]`  \r\n_Save this as output.txt_\r\n\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{python_is_weirdef8ea0cf}`\r\n\r\n\r\n## Binary Instrumentation 1  \r\n![](./assets/re/bininst1/question.png)  \r\n---\r\n### Goals\r\n1. The binary bininst1.exe calls the `Sleep` function from kernel32.dll\r\n2. Using frida-trace, we generate the handler scripts for API functions\r\n3. Intercept any call to `Sleep`, in this case, under `KERNEL32.dll`\r\n4. We then set sleep duration to 0, avoiding the program from sleeping.\r\n---\r\n### Solution\r\n1. Using frida-trace\r\n```bash\r\nfrida-trace -i \"Sleep\" ./bininst1.exe\r\n```\r\n\r\n2. Intercept the handler, by modifying the handler generated, changing sleep duration to zero.\r\n```js\r\n// KERNEL32.DLL/Sleep.js\r\nvar sleepAddr = Module.getExportByName(\"kernel32.dll\", \"Sleep\");\r\nInterceptor.attach(sleepAddr, {\r\n    onEnter: function (args) {\r\n        // Log the original sleep duration (for debugging)\r\n        console.log(\"Original sleep time: \" + args[0].toInt32());\r\n        // Change the sleep duration to 0\r\n        args[0] = ptr(0);\r\n    }\r\n});\r\n```\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{r3d_1s_th3_ult1m4t3_cur3_f0r_54dn355_}`\r\n\r\n\r\n## Binary Instrumentation 2  \r\n![](./assets/re/bininst2/question.png)  \r\n---\r\n### Goals\r\n1. Disassemble with ghidra, look for suspicious function\r\n2. Hook with frida\r\n---\r\n### Solution\r\n1. Deploy the script that hook suspicious function at `0x1dc0`\r\n```js\r\n// Get the module base address for bininst2.exe\r\nvar moduleBase = Module.findBaseAddress(\"bininst2.exe\");\r\nconsole.log(\"Module base address: \" + moduleBase);\r\n\r\n// Calculate the target function address using a known offset (update this offset as needed)\r\nvar funOffset = 0x1dc0; // Adjust this based on your analysis\r\nvar targetFunction = moduleBase.add(funOffset);\r\nconsole.log(\"Hooking function at: \" + targetFunction);\r\n\r\n// Hook the target function (FUN_140001dc0)\r\nInterceptor.attach(targetFunction, {\r\n    onEnter: function(args) {\r\n        // Assume:\r\n        //   args[0] is a pointer to the flag data\r\n        //   args[1] is the length of the flag data\r\n        var length = args[1].toInt32();\r\n        try {\r\n            // Try to read the flag data as a UTF-8 string\r\n            var flagData = Memory.readUtf8String(args[0], length);\r\n            console.log(\"Flag data intercepted (utf8): \" + flagData);\r\n        } catch (err) {\r\n            console.log(\"Error reading flag data as UTF-8: \" + err);\r\n            // If reading as a string fails, dump the raw bytes\r\n            console.log(\"Flag data intercepted (raw):\\n\" + hexdump(args[0], { length: length, header: true, ansi: false }));\r\n        }\r\n    },\r\n    onLeave: function(retval) {\r\n        console.log(\"FUN_140001dc0 returned: \" + retval);\r\n    }\r\n});\r\n```\r\n2. Run the script, then find for the flag\r\n```bash\r\nfrida -l \u003Cscript>.js -f ./bininst2.exe\r\n```\r\n\r\n### Final Result\r\n---\r\nBase64 Encoded Flag:  \r\n![](./assets/re/bininst2/solution.png)  \r\n**Flag:** `picoCTF{fr1da_f0r_b1n_in5trum3nt4tion!_b21aef39}`\r\n\r\n\r\n\r\n## [Forensics]\r\n\r\n## RED  \r\n![](./assets/forensics/red/question.png)  \r\n---\r\n### Goals\r\n1. Steganography, just upload to Aperi'Solve, ez flag\r\n---\r\n### Solution\r\n\r\n![](./assets/forensics/red/solution.png)   \r\n\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{r3d_1s_th3_ult1m4t3_cur3_f0r_54dn355_}`\r\n\r\n\r\n## flags are stepic  \r\n![](./assets/forensics/stepic/question.png)  \r\n---\r\n### Goals\r\n1. Find the country that doesn't exist, the flag persists\r\n2. Download the country flag\r\n3. Search for stepic tool  \r\n        - https://shankaraman.wordpress.com/tag/ctf/  \r\n        - https://code.tools/man/1/stepic/  \r\n        - https://pypi.org/project/stepic/  \r\n4. Install stepic tool through pip\r\n5. Unhide the flag\r\n---\r\n### Solution\r\n\r\n![](./assets/forensics/stepic/upz.gif)  \r\n\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{fl4g_h45_fl4g57f48d94}`\r\n\r\n\r\n## Ph4nt0m 1ntrud3r  \r\n![](./assets/forensics/phantom/question.png)  \r\n---\r\n### Goals\r\n1. Sort the time, since the reference times are messed up\r\n2. Decode flag encoded in base64 in a series of consecutive packets\r\n---\r\n### Solution\r\n\r\n![](./assets/forensics/phantom/solution.gif)  \r\n\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{1t_w4snt_th4t_34sy_tbh_4r_e5e8c78d}`\r\n\r\n\r\n## Event-Viewing  \r\n![](./assets/forensics/event/question.png)\r\n---\r\n### Goals\r\n1. Lookup 1033 Event, msi package install event id\r\n2. Filter with date and time, look for suspicious event after 1033 happen within a short time range, about 20 minutes, found\r\n3. \"EVERY TIME\" \\\u003C---(from question), so clear date and time filter, find with keyword \"shutdown.exe\" throughout whole event log\r\n---\r\n### Solution\r\n\r\nPart 1:  \r\n![](./assets/forensics/event/part1log.png)  \r\n**Base64:** `cGljb0NURntFdjNudF92aTN3djNyXw==`\r\n**Flag 1:** `picoCTF{Ev3nt_vi3wv3r_`\r\n\r\nPart 2:  \r\n![](./assets/forensics/event/part2log.png)\r\n**Base64:** `MXNfYV9wcjN0dHlfdXMzZnVsXw==`\r\n**Flag 2:** `1s_a_pr3tty_us3ful_`\r\n\r\nPart 3:  \r\n![](./assets/forensics/event/part3log.png)  \r\n**Base64:** `dDAwbF84MWJhM2ZlOX0=`\r\n**Flag 3:** `t00l_81ba3fe9}`\r\n\r\n\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{Ev3nt_vi3wv3r_1s_a_pr3tty_us3ful_t00l_81ba3fe9}`\r\n\r\n\r\n\r\n## Rust Fixme 1\r\n### Solution\r\n1. First download the Zip file from the chal.\r\n2. Take a look inside the code and run it.\r\n![](./assets/forensics/rustfixme1/inside.png)  \r\n3. So lets solve all the problem\r\n4. First add the semicolon on the first error.![](./assets/forensics/rustfixme1/firstly.png)  \r\n5. Next add return at the ret(wrong)->return given.\r\n![](./assets/forensics/rustfixme1/next.png)  \r\n6. Last change the things inside the println function to {}![](./assets/forensics/rustfixme1/lastly.png)  \r\n\r\nHere are the original code\r\n\r\n![](./assets/forensics/rustfixme1/firsterr.png)  \r\nFirst error.\r\n\r\n![](./assets/forensics/rustfixme1/secerr.png)  \r\nSecond error.\r\n\r\n![](./assets/forensics/rustfixme1/thirderr.png)  \r\nThird Error.\r\n\r\n### Final Result\r\n---\r\n![](./assets/forensics/rustfixme1/final.png)  \r\n**Flag:** `picoCTF{4r3_y0u_4_ru$t4c30n_n0w?}`\r\n\r\n\r\n## [Binary Exploitation]\r\n\r\n## PIE TIME  \r\n![](./assets/pwn/pie1/question.png)\r\n---\r\n### Goals\r\n1. Call the win() function\r\n---\r\n### Solution\r\n\r\n1. Disassemble with gdb  \r\n![](./assets/pwn/pie1/disass.png)  \r\n\r\n2. Observe the difference in address between main function and win function\r\nThe difference is 0x96, thus, to call the function's address, it must always be `main()` - `0x96`\r\n\r\n### Final Result\r\n---\r\nLaunch the challenge  \r\n![](./assets/pwn/pie1/solution.png)  \r\n**Flag:** `picoCTF{b4s1c_p051t10n_1nd3p3nd3nc3_a267144a}`\r\n\r\n\r\n\r\n## [General Skills]\r\n\r\n## YaraRules0x100  \r\n![](./assets/misc/yara/question.png)  \r\n---\r\n### Goals\r\n1. To detect malware sample with YARA rule while avoiding false positives and false negatives.\r\n2. Malware can exist in packed(obfuscated) or unpacked(fully extracted in memory), the rule should cover both version.\r\n---\r\n### Solution\r\n\r\n```\r\nrule suspacked\r\n{\r\n    strings:\r\n        $packed_div = \".text$div\"\r\n\r\n    condition:\r\n        all of them\r\n}\r\n\r\nrule susunpacked\r\n{\r\n    strings:\r\n        $unpacked_xml = \"\u003C?xml version='1.0' encoding='UTF-8' standalone='yes'?>\"\r\n        $unpacked_dll = \"ADVAPI32.dll\"\r\n\r\n    condition:\r\n        all of them\r\n}\r\n```  \r\n1. Search for yara rule, follow the hint given, work with the format:\r\nhttps://yara.readthedocs.io/en/stable/writingrules.html\r\n2. Open file with ghidra, search for strings, do trial and error\r\n### Final Result\r\n---\r\n**Flag:** `picoCTF{yara_rul35_r0ckzzz_74c37bd8}`","src/content/blog/picoctf2025/index.mdx",[26],"./1200x630.png","3f9216af320a94d7",true,"projects",["Map",31,32,60,61,79,80],"project-b",{"id":31,"data":33,"filePath":45,"assetImports":46,"digest":48,"rendered":49},{"name":34,"description":35,"tags":36,"image":41,"link":42,"startDate":43,"endDate":44},"Project B","This is an example project description! You should replace this with a description of your own project.",[37,38,39,40],"Framework A","Library B","Tool C","Resource D","__ASTRO_IMAGE_../../../public/static/1200x630.png","https://example.com",["Date","2024-02-01T00:00:00.000Z"],["Date","2024-03-01T00:00:00.000Z"],"src/content/projects/project-b.md",[47],"../../../public/static/1200x630.png","23b031de3258bc95",{"html":50,"metadata":51},"",{"headings":52,"localImagePaths":53,"remoteImagePaths":54,"frontmatter":55,"imagePaths":59},[],[],[],{"name":34,"description":35,"tags":56,"image":47,"link":42,"startDate":57,"endDate":58},[37,38,39,40],"2024-02-01","2024-03-01",[],"project-a",{"id":60,"data":62,"filePath":67,"assetImports":68,"digest":69,"rendered":70},{"name":63,"description":35,"tags":64,"image":41,"link":42,"startDate":65,"endDate":66},"Project A",[37,38,39,40],["Date","2024-01-01T00:00:00.000Z"],["Date","2024-02-01T00:00:00.000Z"],"src/content/projects/project-a.md",[47],"e09329f745b2f1eb",{"html":50,"metadata":71},{"headings":72,"localImagePaths":73,"remoteImagePaths":74,"frontmatter":75,"imagePaths":78},[],[],[],{"name":63,"description":35,"tags":76,"image":47,"link":42,"startDate":77,"endDate":57},[37,38,39,40],"2024-01-01",[],"project-c",{"id":79,"data":81,"filePath":85,"assetImports":86,"digest":87,"rendered":88},{"name":82,"description":35,"tags":83,"image":41,"link":42,"startDate":84},"Project C",[37,38,39,40],["Date","2024-03-01T00:00:00.000Z"],"src/content/projects/project-c.md",[47],"ef0b76b0b7aa55e7",{"html":50,"metadata":89},{"headings":90,"localImagePaths":91,"remoteImagePaths":92,"frontmatter":93,"imagePaths":95},[],[],[],{"name":82,"description":35,"tags":94,"image":47,"link":42,"startDate":58},[37,38,39,40],[],"authors",["Map",21,98,114,115,22,130,145,146],{"id":21,"data":99,"filePath":105,"digest":106,"rendered":107},{"name":21,"pronouns":100,"avatar":101,"bio":102,"website":103,"github":104},"he/him","https://avatars.githubusercontent.com/u/83480366?v=4","No logs, No traces...","https://gr1d-init.github.io/","https://github.com/gr1d-init","src/content/authors/gr1d.md","f91c1c07d7970ba9",{"html":50,"metadata":108},{"headings":109,"localImagePaths":110,"remoteImagePaths":111,"frontmatter":112,"imagePaths":113},[],[],[],{"name":21,"pronouns":100,"avatar":101,"bio":102,"website":103,"github":104},[],"bakayang",{"id":114,"data":116,"filePath":121,"digest":122,"rendered":123},{"name":114,"pronouns":100,"avatar":117,"bio":118,"website":119,"github":120},"https://bakayang.vercel.app/images/kirby.png","You have one shot, one opportunity.","https://bakayang.vercel.app/","https://github.com/Exberg","src/content/authors/bakayang.md","aceb2fbbce29433b",{"html":50,"metadata":124},{"headings":125,"localImagePaths":126,"remoteImagePaths":127,"frontmatter":128,"imagePaths":129},[],[],[],{"name":114,"pronouns":100,"avatar":117,"bio":118,"website":119,"github":120},[],{"id":22,"data":131,"filePath":136,"digest":137,"rendered":138},{"name":22,"pronouns":100,"avatar":132,"bio":133,"website":134,"github":135},"https://avatars.githubusercontent.com/u/130538576?v=4","In a world of worries, be the warrior.","https://weixuan0110.github.io/","https://github.com/weixuan0110","src/content/authors/w_11.md","c59319ff9062e1e7",{"html":50,"metadata":139},{"headings":140,"localImagePaths":141,"remoteImagePaths":142,"frontmatter":143,"imagePaths":144},[],[],[],{"name":22,"pronouns":100,"avatar":132,"bio":133,"website":134,"github":135},[],"hoezhiwan",{"id":145,"data":147,"filePath":150,"digest":151,"rendered":152},{"name":145,"pronouns":100,"avatar":148,"github":149},"https://avatars.githubusercontent.com/u/89591638?v=4","https://github.com/HoeZhiWan","src/content/authors/hoezhiwan.md","aa49710a9b300906",{"html":50,"metadata":153},{"headings":154,"localImagePaths":155,"remoteImagePaths":156,"frontmatter":157,"imagePaths":158},[],[],[],{"name":145,"pronouns":100,"avatar":148,"github":149},[]]